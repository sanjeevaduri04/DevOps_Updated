
1) What is Git?

Git is a widely used distributed version control system for tracking changes in source code during software development. It allows multiple developers to collaborate on a project simultaneously, keeping track of all changes made to the codebase over time. Git is popular among developers because of its efficiency, speed, and robust branching model.

Here are some key concepts related to Git:

Repository:

A repository, or repo, is a collection of files and folders associated with a project, along with the version history of those files.

Commit: 

A commit is a snapshot of changes made to the files in a repository at a specific point in time. Each commit has a unique identifier (hash) and includes a commit message that describes the changes.

Branch: 

A branch is a parallel version of the repository, allowing developers to work on features or fixes independently without affecting the main codebase. Branches are lightweight and can be created, merged, or deleted easily.

Merge: 

Merging is the process of combining changes from one branch (source branch) into another (target branch). This is typically done to incorporate new features or bug fixes into the main codebase.

Pull Request (PR):

 A pull request is a request to merge changes from one branch into another. It allows team members to review the proposed changes, discuss them, and provide feedback before merging them into the main branch.

Remote Repository: 

A remote repository is a copy of the repository hosted on a remote server, such as GitHub, GitLab, or Bitbucket. Developers can push changes to and pull changes from the remote repository to collaborate with others.

Overall, Git simplifies collaboration among developers, helps track changes effectively, and facilitates project management in software development workflows.
 
=======================================================================================================

2) what are the difference between Git & GitHub?

 Git and GitHub are related but serve different purposes:

Git:
----

Git is a distributed version control system (DVCS) that is used to track changes in source code during software development.
It is a command-line tool that runs on your local machine and allows you to create repositories, track changes, create branches, merge changes, and collaborate with others.
Git operates locally on your computer, which means you can work offline and commit changes to your local repository without needing an internet connection.


GitHub:
------

GitHub is a web-based hosting service for Git repositories.
It provides a platform for collaboration and allows developers to store their Git repositories remotely on GitHub's servers.
GitHub offers features such as issue tracking, pull requests, project management tools, code review, and collaboration features like wikis and discussions.
GitHub also provides a graphical user interface (GUI) for interacting with Git repositories, making it more accessible to users who prefer not to use the command line.
It's important to note that while GitHub is a popular platform for hosting Git repositories, there are other alternatives such as GitLab and Bitbucket that offer similar services.
In summary, Git is the version control system itself, while GitHub is a hosting service for Git repositories that provides additional collaboration and project management features. 
You can use Git without GitHub, but GitHub provides a convenient platform for hosting and collaborating on Git repositories.
 

 =======================================================================================================
 
 differnce between github & gitlab
 
 https://www.upgrad.com/blog/github-vs-gitlab-difference-between-github-and-gitlab/
 
======================================================================================================= 
 
 Git Commands:
 ------------
 INSPECT & COMPARE   = Examining logs, diffs and object information
 -----------------
 
 git log --> show the commit history for the currently activr branch 
 
 git log branchB ..branchA  --> show the commits on branchA that are not on branchB
 
 git log --follow [file] --> show the commits that changed file, even across renames
 
 git shoe [SHA] --> show any object in Git in human readable format
 
 ================================================================================================
 
 TRACKING PATH CHANGES
 ---------------------     Versioning file removes and path changes
 
 git rm [file] --> delete the file from project and stage the removal for commit
 
 git mv [existimg-path] [new-path] --> Change an existing file path and dtage the remove
 
 git log --stat -M --> show all commit logs with indication of any pths moved
 
 =====================================================================================================
 
 IGNORING PATTERNS
 ------------------ Preventing unintentional staging or committing of files
 
 logs/
 *.notes
 pattern*/
 
 Save a file with desired patterns as .gitigonre with either direct string matches or wildcard globals
 
 git config --global core.excludgesfile [file] --> System wide ignore patern for all local repositories
 ==============================================================================================================
 
 SHARE & UPDATE   
 ------------

 Retrieving updates from another repository and updating local repository 
 
 
 git remote add [alias] [url] --> dd a git URL as an alias
 
 git fetch [alias]  --> Fetch down all the branches from that Git remote
 
 git merge [alias]/[branch] --> merge a remote branch into your current branch to bring it up  
 to date.
 
 git push [alias] [branch] --> Trnasmit locl branch commits to the remote repository branch 
 
 git pull --> fetch and merge any commits from the tracking remote branch
 
 
 ================================================================================
 
 REWRITE HISTORY 
 ----------------     
 Rewriting branches, updting commits and clearing history 
 
 git rebase --> ply any commits of curent branch ahead od specified one
 
 git reset --hard [commit] --.clear staging area, rewrite working tree from specified commit.
 
 =================================================================================================
 
 
 TEMPORARY COMMITS
 -----------------  
 Temporary store modified, trcked file in order to change branches
 
 git stash --> Save modified and stged changes
 
 git stash list --> list stack order of stashed file changes
 
 git stsh pop --> write working from top of stash stck
 
 git stash drop --> discard the changes from top of stash stack
 
 =====================================================================================
 
 
 To understand how git works we will be using some plumbing commands of git.
git cat-file -t <id> # to know the type
git cat-file -p <id> # to know the contents


Merge and cherry-pick
Merging branches is one way of bringing changes from one branch to other.
As of now of status of the branch is as follows
