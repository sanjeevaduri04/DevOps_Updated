
 Docker is a containerization tool



 Docker is a containerization tool

-What is Docker and why is it used?
Docker is a software platform that allows you to build, test, and deploy applications quickly. 
Docker packages software into standardized units called containers that have everything the software needs to run including libraries, system tools, code, and runtime.

-Docker made is simple to create containers
-Consider container as an isolated area with cpu, ram and network which makes application belive that it running on full blown os.
-Since containers are light weight we can run many instances on the server.

Lets see what a container offers
--------------------------------
Inside the container also,

- we have an os
- network
- cpu/ram/storage
- necessary softwares
- we downloaded package
- we executed application.
- As we discussed, containers can be scaled (increased)
- If we can rethink of application as multiple individually runnable services rather than a ntier (or monolith)
- We can scale the necesary components which can reduce costs
- We can individually update the necessary components without impacting the whole application
- By the way this approach is technically referred as "micro-services."
                                                      ----------------

Installing Docker on a Ubuntu
-----------------------------------
https://docs.docker.com/engine/install/ubuntu/

Docker Playground  --> https://labs.play-with-docker.com/

-Docker has two major components
 - Client
 - Engine/Runtime/Server



 Activity 1: Now lets assume we want to run nginx inside a container.
 ----------

 - We need docker image to create a container.
 - We can search for existing images Refer Here Refer Here
 - The name of the image is nginx
 - To create a container run the following command 
  "docker container run -d -P nginx"

  Takeaway: To create a container i need an image.
 - If we need to run the application developed by our dev team inside containers we need to create image of it.
 - Creating the docker image for an application is called as containerizing and this is our first activity as a devops engineer. 

 -----------------------------------------------------------------------------------------------------------------------------------


 Activity 2: I want to run a postgressql inside a container
------------
for the postgres image
The command is docker container run -d -P postgres


----------------------------------------------------------------

 How do i build Docker images?

 - As learnt in the demo, when ever dev team makes changes in the code, we are expected to create a docker image
 - Since there will be lot of changes, we need to maintain multiple versions.
 - A version in docker image is referred as tag.
 - Ideally the docker image build should be done along with code developed by dev team.
 - Will be continued in the next session


 Install Docker on a linux machine

  - Create a linux vm
  - Create AWS EC2

  Installing latest version of docker on linux
  --------------------------------------------

  - curl -fsSL https://get.docker.com -o get-docker.sh
  - sh get-docker.sh

  After installing docker, the connection between client and docker engine is not working due to permission issue
  * Option 1: run docker as root user
  * Option 2: Add current user to the docker group
     - sudo usermod -aG docker <username>
     - # exit and relogin
    

    -------------------------------------------------------------------------------------------------------------------

 Image Building process
 ----------------------

 Manual approach
 ---------------

  - To build a image that runs our application, we need to know the manual steps of running our application.
  - In this case, lets consider the application to be spring pet clinic.
      - runtime: Java 11 (JDK 11)
      - software package Refer Here
      - runs on port 8080

  - To build a image we will be using existing image, When we pick the existing image for our application

       - option 1: take a image and install runtime and download package
       - option 2: take a image which already has a runtime & download and run application.

  We have opted for option 2 and chosen openjdk:11 (image:tag).
  Lets create a container and login into it

  - "docker container run -p <port of linux>:<port of application> -it <image>:<tag> <terminal>"
  - "docker container run -p 8080:8080 -it openjdk:11 /bin/bash"

  - Now download the application springpet-clinic-1.0.jar 
    Ex: wget https://vjhfuiftd.com/springpet-clinic-1.0.jar

  - Now exit after downloading the application
     docker container ls (we are unable to see containers bcz it is in excited state)
     docker container ls -a (_this command show the exited container list)
  - Now in this container we have spring petclinic

  - "Now lets create image from container"
  ---------------------------------------

     docker container commit container_name  (will get the image from container)
     docker image ls

  - docker image tag 9865hghjt my_image
---------------------------------------------------------------------------------------------------------------------

Automated Approach
------------------

 We need to create Dockerfile.

The Dockerfile has set of instructions
<INSTRUCTION> VALUE

Sample Dockerfile
-----------------
   

    FROM openjdk:11
    LABEL author=khaja
    RUN wget https://referenceapplicationskhaja.s3.us-west-2.amazonaws.com/spring-petclinic-2.4.2.jar
    EXPOSE 8080
    CMD ["java", "-jar", "/spring-petclinic-2.4.2.jar"]
---------------------------------------------------------------------------------------------------------------------    



In the above Dockerfile the instructions are
FROM
LABEL
RUN
EXPOSE
CMD


This Dockerfile when executed with "docker image build -t <image>:<tag>" "<directory with docker file>" (to build an image) will try to create a container based on base image and run all the necessary instructions and creates the image

When we start the container from image whatever is mentioned in CMD/ENTRYPOINT gets executed.

Lets try to create one more application gameoflife. This application requires

server: tomcat
runtime: java 8
port 8080
Download gameoflife into webapps https://referenceapplicationskhaja.s3.us-west-2.amazonaws.com/gameoflife.war

Refer Here for the tomcat image (https://hub.docker.com/_/tomcat)


FROM tomcat:9.0.64-jdk8-temurin-focal
LABEL author=khaja
LABEL why=forfun
RUN curl https://referenceapplicationskhaja.s3.us-west-2.amazonaws.com/gameoflife.war --output /usr/local/tomcat/webapps/gameoflife.war
EXPOSE 8080

-----------------------------------------------------------------------------------------------------------------------------------------



Working with Dockerfile
-----------------------

 - Dockerfile is a text file that contains instructions on how to create docker images.
   (A Dockerfile is a text document that contains all the commands a user could call on the command line to assemble an image.)
 - These commands are known as directives
 - # This is comment
   DIRECTIVE argument

   Common Directives:
   ------------------

   FROM: (To pull the base image)
      - This is used to set the base image/parent image
      - This can be any image from Docker hub
      - FROM <image>:<tag> if the tag is not mentioned latest tag will be applied/assumed by Docker image
      - If you want to build the docker image from scratch then use FROM scratch

   LABEL” 

      - This is key-value pair used to add metadata to Docker Image
        LABEL <KEY>=<VALUE>
      - We can add multiple LABEL directives or multiple labels with space sepearted.

   RUN:  (To execute the commands)

      - This directive is used to execute the command during image build time.
      - This will generally have application configuration/installation etc
      - Any RUN command which impacts the storage a new layer will be created.

   CMD:   (To provide defaults for an executing container)

      - This directive will be executed when the container is created when no ENTRYPOINT directive exists
      - If the CMD is not present in current image it will execute parents CMD directive
      - Container will be in running state as long as the instructions in CMD are executing
      - The CMD has two forms exec and shell form

        "EXEC form"

        CMD ["executable", "param1", ... , "paramn"]
        CMD ["echo", "hello-world" ]


        "SHELL FORM"

        CMD executable param1 .. paramn
        CMD echo hello-world
   
   
   
   EXPOSE: (Informs docker that the container listend on the specified network ports at runtime)

     - This directive will expose the port of the container


   ADD:
    - This directive is used to copy files into docker image while building the image
      Syntax   ADD <src> <dest>
      For the ADD src can be local files as well as URL’s


   COPY:
    - This directive is used to copy files into docker image while building the image
    - Syntax COPY <src> <dest>
    - For COPY directive the source can be only "local files"
                                                 -----------


-----------------------------------------------------------------------------------------



Lets start inspecting images
----------------------------
Docker inspect provides detailed information on constructs controlled by Docker.


- Lets build a Docker image called as hello:0.1.0
-------------------------------------------------

   docker image build -t hello:0.1.0 . (command to build an image)

- If we use scratch copying the files with kernel and executables is also our responsibility so for this session since we focus on building containers for software applications, choose the base image with necessary files is good choice.
- Since we have built the image lets inspect it
  docker image inspect hello:0.1.0

- Now lets take a docker image as parent which has some files in it



- lets build a new image hello:0.1.1
------------------------------------
  docker image build -t hello:0.1.1

- lets inspect alpine image docker image inspect alpine:3.0
- for changeset containing RUN directive and impact on docker image layers
  (https://github.com/asquarezone/DockerZone/commit/1a28d1bcc325e6498564d5eab0c3d37a777c19a2)




- lets build a new image hello:0.1.2
------------------------------------
  
   docker image build -t hello:0.1.2
- Now lets inspect hello:0.1.2 specifically layers

"""Docker image is collection of image layers"""
 - For docker container to work these layers should be combine to form a file system
 - Since docker images have layers and container need to process them docker has different storage drivers which help containers work with image layers.
 - The container which we built is not running


  docker container ls -a -q (Remove all the containers)



--------------------------------------------------------------------------------------------------------------------------------------------------------------------
